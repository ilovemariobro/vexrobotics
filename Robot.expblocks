{"mode":"Blocks","workspace":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"U`9aA+=)r+L1tzA.)-qi\">myVariable</variable></variables><comment id=\"||qBoWibl7d^xs$Hyhw`\" x=\"152\" y=\"39\" h=\"107.02153015136719\" w=\"344.7413330078125\">Configuration:\nEXP Clawbot (Drivetrain 2-motor, Inertial)\nArm Motor in Port 3 \nClaw Motor in Port 4\nBumper Switch in Port A</comment><block type=\"exp_events_when_started\" id=\"4I4Dp3+0n8M^W@qK%}w?\" x=\"150\" y=\"170\"><next><block type=\"exp_other_comment\" id=\"y;fk[CLDi_,Tjh3aD8DG\"><value name=\"COMMENT\"><shadow type=\"comment_text\" id=\"nr_CY{P%iEY6`fB/=^QQ\"><field name=\"comment\">robotInit()</field></shadow></value><next><block type=\"exp_sensing_controller_is_enabled\" id=\"le^jK[388t1JQ7L`#!l-\"><field name=\"isEnabled\">true</field><next><block type=\"exp_motion_set_motor_stopping\" id=\"#TzO.v?gyGBZ`}9LAIk4\"><field name=\"MOTOR\">ArmMotor</field><field name=\"MODE\">hold</field></block></next></block></next></block></next></block><block type=\"exp_events_when_controller_button\" id=\"4_?`9Pcg/+DAz3$GFZ|Z\" x=\"770\" y=\"170\"><field name=\"BUTTON\">ButtonA</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"exp_other_comment\" id=\"H`z/jcFuu-dX==aR_jAq\"><value name=\"COMMENT\"><shadow type=\"comment_text\" id=\"Uo6n,~Z5$T7UUc3TaZHV\"><field name=\"comment\">autonomousInit()</field></shadow></value><next><block type=\"exp_looks_print\" id=\"}/tC}V8d5vO^u|4fUC*w\"><field name=\"TARGET\">Console</field><field name=\"andsetcursortonextrow_mutator\">false</field><value name=\"DATA\"><shadow type=\"text\" id=\"utI@!9rI(:bIkh[6}Yok\"><field name=\"TEXT\">Autonomous Code Run</field></shadow></value></block></next></block></next></block><block type=\"exp_events_when_bumper\" id=\"1`0sW)lmn!pu41pGmAGN\" x=\"150\" y=\"410\"><field name=\"BUMPER\">BumperA</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"exp_other_comment\" id=\"{i$V8N7Q:Ms^0ck.s65#\"><value name=\"COMMENT\"><shadow type=\"comment_text\" id=\"u8y5D)h8l#8KHvJKm.2#\"><field name=\"comment\">REQUIRED CODE. DO NOT TOUCH</field></shadow></value><next><block type=\"exp_sensing_controller_is_enabled\" id=\"_*87}RYtK(Oq/G_@-RQQ\"><field name=\"isEnabled\">false</field><next><block type=\"exp_motion_stop_driving\" id=\"m2c,UIXZS9qqQ]qf2YA`\"><next><block type=\"exp_motion_spin\" id=\"n})6@FS$ASU)[MUWxN/=\"><field name=\"MOTOR\">ClawMotor</field><field name=\"DIRECTION\">rev</field><next><block type=\"exp_motion_spin\" id=\"~t-Z3No0xtLhDS2l*]eJ\"><field name=\"MOTOR\">ArmMotor</field><field name=\"DIRECTION\">rev</field><next><block type=\"exp_control_repeat\" id=\"w=!54;,(]*^:L!}fLQuo\"><value name=\"TIMES\"><shadow type=\"math_whole_number\" id=\"EtP5130CS},XGB_M%yoS\"><field name=\"NUM\">20</field></shadow></value><statement name=\"SUBSTACK\"><block type=\"exp_looks_print\" id=\"hM@32Wu:G0hsgr2|G[}w\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">true</field><value name=\"DATA\"><shadow type=\"text\" id=\"q2n!i~YJp~HQc`RM!AqM\"><field name=\"TEXT\">FREEZE</field></shadow></value><next><block type=\"exp_control_wait\" id=\"myWL4}S$;=|H5@@i++|H\"><value name=\"DURATION\"><shadow type=\"math_positive_number\" id=\"A^H,%fShIfZuMH$+[1;=\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement><next><block type=\"exp_sensing_controller_is_enabled\" id=\"S?#Ra_?EZb0^J[^5we9=\"><field name=\"isEnabled\">true</field><next><block type=\"exp_looks_clear_all_rows\" id=\"qcOH(bL/]?O*c0E3?B.I\"><field name=\"TARGET\">Brain</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></xml>","rconfig":[{"port":[6,10,null],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel325in","gearRatio":"1:1","direction":"fwd","gyroType":"integrated","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[3],"name":"ArmMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"up","rev":"down"},"triportSourcePort":22},{"port":[4],"name":"ClawMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"close","rev":"open"},"triportSourcePort":22},{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"ArmMotor","leftDir":"true","right":"ClawMotor","rightDir":"true","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"split"},"triportSourcePort":22},{"port":[1],"name":"BumperA","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22}],"slot":0,"platform":"EXP","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","v5SoundsEnabled":false,"downloadLanguage":"python","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START EXP MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END EXP MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\nmotor LeftDriveSmart = motor(PORT6, false);\nmotor RightDriveSmart = motor(PORT10, true);\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, BrainInertial, 259.34, 320, 40, mm, 1);\n\nmotor ArmMotor = motor(PORT3, true);\n\nmotor ClawMotor = motor(PORT4, false);\n\ncontroller Controller = controller();\nbumper BumperA = bumper(Brain.ThreeWirePort.A);\n\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  BrainInertial.calibrate();\n  while (BrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool ControllerLeftShoulderControlMotorsStopped = true;\nbool ControllerRightShoulderControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller = true;\nbool DrivetrainRNeedsToBeStopped_Controller = true;\n\n// define a task that will handle monitoring inputs from Controller\nint rc_auto_loop_function_Controller() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3 + Axis1\n      // right = Axis3 - Axis1\n      int drivetrainLeftSideSpeed = Controller.Axis3.position() + Controller.Axis1.position();\n      int drivetrainRightSideSpeed = Controller.Axis3.position() - Controller.Axis1.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonL1/ButtonL2 status to control ArmMotor\n      if (Controller.ButtonL1.pressing()) {\n        ArmMotor.spin(reverse);\n        ControllerLeftShoulderControlMotorsStopped = false;\n      } else if (Controller.ButtonL2.pressing()) {\n        ArmMotor.spin(forward);\n        ControllerLeftShoulderControlMotorsStopped = false;\n      } else if (!ControllerLeftShoulderControlMotorsStopped) {\n        ArmMotor.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        ControllerLeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonR1/ButtonR2 status to control ClawMotor\n      if (Controller.ButtonR1.pressing()) {\n        ClawMotor.spin(reverse);\n        ControllerRightShoulderControlMotorsStopped = false;\n      } else if (Controller.ButtonR2.pressing()) {\n        ClawMotor.spin(forward);\n        ControllerRightShoulderControlMotorsStopped = false;\n      } else if (!ControllerRightShoulderControlMotorsStopped) {\n        ClawMotor.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        ControllerRightShoulderControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller(rc_auto_loop_function_Controller);\n\n// Include the EXP Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint Brain_precision = 0, Console_precision = 0;\n\nfloat myVariable;\n\n// \"when started\" hat block\nint whenStarted1() {\n  // robotInit()\n  RemoteControlCodeEnabled = true;\n  ArmMotor.setStopping(hold);\n  return 0;\n}\n\n// \"when Controller ButtonA pressed\" hat block\nvoid onevent_ControllerButtonA_pressed_0() {\n  // autonomousInit()\n  printf(\"Autonomous Code Run\");\n}\n\n// \"when BumperA pressed\" hat block\nvoid onevent_BumperA_pressed_0() {\n  // REQUIRED CODE. DO NOT TOUCH\n  RemoteControlCodeEnabled = false;\n  Drivetrain.stop();\n  ClawMotor.spin(reverse);\n  ArmMotor.spin(reverse);\n  repeat(20) {\n    Brain.Screen.print(\"FREEZE\");\n    Brain.Screen.newLine();\n    wait(1.0, seconds);\n    wait(5, msec);\n  }\n  RemoteControlCodeEnabled = true;\n  Brain.Screen.clearScreen();\n}\n\n\nint main() {\n  // Calibrate the Drivetrain\n  calibrateDrivetrain();\n\n  // register event handlers\n  Controller.ButtonA.pressed(onevent_ControllerButtonA_pressed_0);\n  BumperA.pressed(onevent_BumperA_pressed_0);\n\n  wait(15, msec);\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // Wait for ADI sensors to initialize\n  wait(100, msec);\n\n\n  whenStarted1();\n}","target":"Physical"}